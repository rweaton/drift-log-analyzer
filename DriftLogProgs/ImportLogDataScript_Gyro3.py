import pandas as pd
import numpy as np
import os.path
import platform
# from Tkinter import *
# import tkFileDialog
# from tkinter import *
import tkinter
# from tkFileDialog import askopenfilename
from tkinter import filedialog
# root = Tk() ; root.withdraw()


def ismember(A, B):
    return [np.sum(a == B) for a in A]


def ismember2(A, B):
    A = np.array(A, dtype=object)
    B = np.array(B, dtype=object)

    Indices = np.arange(0, B.size)
    revIndices = np.arange(0, A.size)

    Locs = np.empty_like(A)
    revLocs = np.empty_like(B)

    Exists = np.empty_like(A)

    i = 0
    j = 0

    for a in A:
        Filter = (a == B)
        Exists[i] = np.sum(Filter)
        Locs[i] = Indices[Filter]
        i += 1

    for b in B:
        revFilter = (b == A)
        revLocs[j] = revIndices[revFilter]
        j += 1

    return(Exists, Locs, revLocs)


def ImportData():
    # This version of the program takes as input the LAS file generated from
    # Verticality.exe (Robertson Geologging). Data columns therein are filtered
    # or averaged signals from Winlogger recordings of the gyro tool's signal
    # output.
    #
    # NOTE: LAS files processed by this routine typically have the "_Devdat.LAS"
    # suffix in the filename; indicated that the file was generated by Verticality's
    # LAS file exporter

    # Get path of present working directory
    CodeDir = os.path.dirname(os.path.realpath(__file__))
    #DataDir = 'F:\LAS_files'
  
    if (platform.node() == 'Darius'):

        DataDir = 'f:\\LAS_files'

    elif (platform.node() == 'Xerxes'):

        DataDir = '/mnt/storage/LAS_files'

    elif (platform.node() == 'thug2-Mac-Laptop.local'):

        #DataDir = '/Volumes/davserver_dir/PythonProgs/DriftLogProgs'
        DataDir = '/Volumes/webdav/PythonProgs/DriftLogProgs'
        #DataDir = '/Volumes/f/DriftLogProgs'
        #DataDir = '/Volumes/F/DriftLogProgs'

    elif (platform.node() == 'LOGGING-ROOM-PC-Linux'):

        DataDir = '/media/thugwithyoyo/Darius-f/LAS_files'

    else:
        DataDir = CodeDir

    # Get path to data file
    opts = {}
    opts['filetypes'] = [('las files', '.las'), ('LAS files', '.LAS'),
        ('csv files', '.csv'), ('All files', '.*')]
    opts['initialdir'] = DataDir

    root = tkinter.Tk()
    root.withdraw()
    root.update()
    DataFilePath = filedialog.askopenfilename(**opts)
    #DataFilePath = askopenfilename(**opts)
    DataDir = os.path.dirname(DataFilePath)
    root.destroy()

    # User specifies source of LAS file (ie. Eaton, West Coast, Newman or Pacific Surveys)
    DictIndex = input('LAS file source? (0 = Eaton, 1 = Eaton (CSV)): ')
    DictIndex = int(DictIndex)

    # Define dictionary for source-specific import parameters (i.e. relevant
    # header names and header line no.)
    ColumnHeadersDict = {'Depth': ['DEPT', 'DEPT'],  # Depth values header
                         'DevComp_North': ['DEVN', 'DEVN'],    # Deviation component in North direction
                         'DevComp_East': ['DEVE', 'DEVE'],    # Deviation component in the East direction
                         'DevComp_Down': ['DEVD', 'DEVD'],     # Deviation component in the downward direction  
                         'DevAzimuth': ['AZIM', 'AZIM'],      # Azimuthal angle of the deviation vector
                         'DevInclination': ['DEV', 'DEV'],  # Inclination angle of the deviation vector
                         'hline': [44, 0]               # Line containing header info (counting from 0)
                         }

    HeaderLine = ColumnHeadersDict['hline'][DictIndex]
    LinesToSkip = HeaderLine+1

    # Change directory to folder containing LAS files
    os.chdir(DataDir)

    # Get Column names
    if (DictIndex == 1):
        ColumnNamesTable = pd.read_csv(DataFilePath, sep=',', header=HeaderLine, nrows=1)
    else:
        ColumnNamesTable = pd.read_csv(DataFilePath, sep='\s+', header=HeaderLine, nrows=1)

    # Eliminate bad ~A character from list
    if (DictIndex == 1):
        ColumnsToKeep = ColumnNamesTable.columns.values

    else:
        ColumnsToKeep = ColumnNamesTable.columns.values
        ColumnsToKeep = ColumnsToKeep[1:]

    # Select relevant columns and use universal header names in dataframe
    # to be formed
    NamesToMatch = np.array([ColumnHeadersDict['Depth'][DictIndex],
                             ColumnHeadersDict['DevComp_North'][DictIndex],
                             ColumnHeadersDict['DevComp_East'][DictIndex],
                             ColumnHeadersDict['DevComp_Down'][DictIndex],
                             ColumnHeadersDict['DevAzimuth'][DictIndex],
                             ColumnHeadersDict['DevInclination'][DictIndex]])

    ColumnNames = np.array(['Depth', 'DevComp_North', 'DevComp_East',
                            'DevComp_Down', 'DevAzimuth', 'DevInclination'])


    #IndexFilter = ismember(ColumnsToKeep, NamesToMatch) 
    IndexFilter, Locs, revLocs = ismember2(ColumnsToKeep, NamesToMatch)
    ColumnIndices = np.empty_like(np.arange(0, ColumnNames.size))
    NamesMap = np.empty_like(np.arange(0, ColumnNames.size))

    j = 0
    for l in revLocs:

        if (l.size != 0):
            ColumnIndices[j] = l[0]
            j += 1

    i = 0
    for l in Locs:
        if (l.size != 0):
            NamesMap[i] = l[0]
            i += 1

    # Rearrange Lables

    #IndexFilter = np.array(IndexFilter)
    #IndexFilter = (IndexFilter == 1)

    # Read text file to a Table (DataFrame)
    #NamesMap = np.unique(NamesMap)
    #ColumnIndices = np.unique(ColumnIndices)

    if (DictIndex == 1):
        LogDataTable = pd.read_csv(DataFilePath, sep=',', skiprows=LinesToSkip,
                                   names=ColumnNames[NamesMap], usecols=ColumnIndices)
    else:
        LogDataTable = pd.read_csv(DataFilePath, sep='\s+', skiprows=LinesToSkip,
                                   names=ColumnNames[NamesMap], usecols=ColumnIndices)

    # Return to code directory
    os.chdir(CodeDir)

    return(LogDataTable)
